{"version":3,"sources":["../../../../src/components/monaco-editor/index.tsx"],"sourcesContent":["\"use client\";\n\nimport Editor, { EditorProps, OnMount } from \"@monaco-editor/react\";\nimport type {\n  CancellationToken,\n  editor,\n  IRange,\n  Position,\n} from \"monaco-editor\";\nimport { useRef, useEffect, useCallback, useState } from \"react\";\nimport { languages } from \"monaco-editor/esm/vs/editor/editor.api\";\n\nimport LanguageConfiguration = languages.LanguageConfiguration;\n\nimport { Symbol } from \"api/js/types/v1/symbol_pb\";\nimport { LANGUAGE_ID } from \"./globals\";\nimport { humanlogqlLanguageDefinition } from \"./monarch\";\n\ninterface MonacoEditorProps extends Omit<EditorProps, \"theme\"> {\n  width?: number | string;\n  height?: number;\n  value: string;\n  onChange?: (value: string | undefined) => void;\n  onMount?: OnMount;\n  options?: editor.IStandaloneEditorConstructionOptions;\n}\n\nconst defaultOptions: editor.IStandaloneEditorConstructionOptions = {\n  automaticLayout: true,\n  minimap: { enabled: false },\n  lineNumbers: \"off\",\n  overviewRulerBorder: false,\n  overviewRulerLanes: 0,\n  hideCursorInOverviewRuler: true,\n  renderLineHighlight: \"none\",\n  scrollbar: {\n    vertical: \"auto\",\n    horizontal: \"auto\",\n    verticalScrollbarSize: 8,\n    horizontalScrollbarSize: 8,\n    useShadows: false,\n  },\n  scrollBeyondLastLine: false,\n  padding: { top: 8, bottom: 8 },\n  fontSize: 14,\n  lineHeight: 20,\n  contextmenu: false,\n  selectOnLineNumbers: false,\n  roundedSelection: false,\n  readOnly: false,\n  cursorStyle: \"line\",\n\n  wordWrap: \"off\",\n  quickSuggestions: true,\n  parameterHints: { enabled: true },\n  suggestOnTriggerCharacters: true,\n};\n\nconst MonacoEditor = ({\n  width = \"100%\",\n  height = 60,\n  value,\n  onChange,\n  onMount,\n  options,\n  ...props\n}: MonacoEditorProps) => {\n  const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null);\n  const monacoRef = useRef<typeof import(\"monaco-editor\") | null>(null);\n  const [dynamicHeight, setDynamicHeight] = useState<number>(height);\n\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  const handleResize = useCallback(() => {\n    if (editorRef.current) {\n      editorRef.current.layout();\n    }\n  }, []);\n\n  // Auto-resize based on content\n  useEffect(() => {\n    if (editorRef.current && value) {\n      const lineCount = value.split(\"\\n\").length;\n      const minHeight = 60;\n      const maxHeight = 200;\n      const lineHeight = 18;\n      const padding = 10;\n\n      const calculatedHeight = Math.min(\n        Math.max(lineCount * lineHeight + padding, minHeight),\n        maxHeight,\n      );\n\n      setDynamicHeight(calculatedHeight);\n    } else {\n      setDynamicHeight(height);\n    }\n  }, [value, height]);\n\n  // Recalculate height on mount to handle modal scenarios\n  useEffect(() => {\n    if (value) {\n      const lineCount = value.split(\"\\n\").length;\n      const minHeight = 60;\n      const maxHeight = 200;\n      const lineHeight = 18;\n      const padding = 10;\n\n      const calculatedHeight = Math.min(\n        Math.max(lineCount * lineHeight + padding, minHeight),\n        maxHeight,\n      );\n\n      setDynamicHeight(calculatedHeight);\n    }\n  }, []); // Run only on mount\n\n  // Update editor layout when height changes\n  useEffect(() => {\n    if (editorRef.current) {\n      editorRef.current.layout();\n    }\n  }, [dynamicHeight]);\n\n  const handleEditorDidMount: OnMount = (editor, monaco) => {\n    editorRef.current = editor;\n    monacoRef.current = monaco;\n\n    editor.getModel()?.updateOptions({ tabSize: 2 });\n    editor.updateOptions(defaultOptions);\n\n    // initialize the layout\n    editor.layout();\n\n    monaco.editor.defineTheme(\"humanlogql-dark\", {\n      base: \"vs-dark\",\n      inherit: true,\n      rules: [],\n      colors: {\n        \"editor.background\": \"#000000\",\n      },\n    });\n    monaco.editor.defineTheme(\"humanlogql-light\", {\n      base: \"vs\",\n      inherit: true,\n      rules: [],\n      colors: {\n        \"editor.background\": \"#FFFFFF\",\n      },\n    });\n\n    monaco.languages.register({\n      id: LANGUAGE_ID,\n    });\n\n    monaco.languages.setLanguageConfiguration(\n      LANGUAGE_ID,\n      languageConfiguration,\n    );\n    monaco.languages.setMonarchTokensProvider(\n      LANGUAGE_ID,\n      humanlogqlLanguageDefinition,\n    );\n\n    monaco.languages.registerCompletionItemProvider(LANGUAGE_ID, {\n      triggerCharacters: [\"[\", \"|\"],\n      provideCompletionItems: async (\n        model: editor.ITextModel,\n        position: Position,\n        context: languages.CompletionContext,\n        token: CancellationToken,\n      ) => {\n        let suggestions: languages.CompletionItem[] = [];\n\n        switch (context.triggerKind) {\n          case languages.CompletionTriggerKind.Invoke:\n            suggestions.push(...defaultColumnsSuggestions(model, position));\n            break;\n\n          default:\n            break;\n        }\n\n        return {\n          suggestions: suggestions,\n        };\n      },\n    });\n\n    onMount?.(editor, monaco);\n  };\n\n  // detect resizing event\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [handleResize]);\n\n  return (\n    <Editor\n      width={width}\n      height={dynamicHeight}\n      defaultLanguage={LANGUAGE_ID}\n      value={value}\n      onChange={onChange}\n      options={mergedOptions}\n      onMount={handleEditorDidMount}\n      loading={<>Loading Editor...</>}\n      {...props}\n    />\n  );\n};\n\n// largely lifted from https://github.com/Azure/monaco-kusto/tree/master/package/src/syntaxHighlighting\nconst languageConfiguration: LanguageConfiguration = {\n  folding: {\n    offSide: false,\n    markers: { start: /^\\s*[\\r\\n]/gm, end: /^\\s*[\\r\\n]/gm },\n  },\n  comments: {\n    lineComment: \"//\",\n    blockComment: null,\n  },\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n  ],\n  brackets: [\n    [\"[\", \"]\"],\n    [\"{\", \"}\"],\n    [\"(\", \")\"],\n  ],\n  colorizedBracketPairs: [],\n};\n\nconst rangeForModelPos = (\n  model: editor.ITextModel,\n  pos: Position,\n  keyword: string,\n): IRange => {\n  const word = model.getWordUntilPosition(pos);\n  return {\n    startLineNumber: pos.lineNumber,\n    endLineNumber: pos.lineNumber,\n    startColumn: word.startColumn,\n    endColumn: word.endColumn,\n  };\n};\n\nconst defaultColumnsSuggestions = (\n  model: editor.ITextModel,\n  pos: Position,\n): languages.CompletionItem[] => {\n  // find out if we are completing a property in the 'dependencies' object.\n\n  return [\n    {\n      label: {\n        label: \"machine\",\n        detail: \" machine that emitted the log event\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"machine\",\n      documentation: \"The machine on which a log was recorded.\",\n      range: rangeForModelPos(model, pos, \"machine\"),\n    },\n    {\n      label: {\n        label: \"session\",\n        detail: \" session of a log event\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"session\",\n      documentation:\n        \"The session during which a log was recorded. Sessions roughly map to processes, or a single invocation of `humanlog`. Sessions are unique only within a machine.\",\n      range: rangeForModelPos(model, pos, \"machine\"),\n    },\n    {\n      label: {\n        label: \"event\",\n        detail: \" event is an identifier for a log event\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"event\",\n      documentation:\n        \"The event during which a log was recorded. Events roughly map to log lines ingested by `humanlog`. Events are unique and ordered only within a (machine, session) pair. No global order exists.\",\n      range: rangeForModelPos(model, pos, \"event\"),\n    },\n    {\n      label: {\n        label: \"parsed_at\",\n        detail: \" parsed_at is the timestamp when the log event was parsed\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"parsed_at\",\n      documentation:\n        \"The timestamp when the log event was parsed in `humanlog`.\",\n      range: rangeForModelPos(model, pos, \"parsed_at\"),\n    },\n    {\n      label: {\n        label: \"raw\",\n        detail: \" raw is the raw content of the log event\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"raw\",\n      documentation: \"The full unparsed content of the log event.\",\n      range: rangeForModelPos(model, pos, \"raw\"),\n    },\n    {\n      label: {\n        label: \"ts\",\n        detail: \" ts is a timestamp for a log event\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"ts\",\n      documentation:\n        \"The ts found in a log event, if parsed in `humanlog`. When no timestamp is found, the default timestamp is the time of parsing. See `parsed_at`.\",\n      range: rangeForModelPos(model, pos, \"ts\"),\n    },\n    {\n      label: {\n        label: \"lvl\",\n        detail: \" lvl is a log level\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"lvl\",\n      documentation:\n        \"The log level found in a log event, if parsed in `humanlog`. Usually one of `debug`, `info`, `warn`, `error`, `panic` or `fatal`.\",\n      range: rangeForModelPos(model, pos, \"lvl\"),\n    },\n    {\n      label: {\n        label: \"msg\",\n        detail: \" msg is the main message a log event\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"msg\",\n      documentation:\n        \"The message found in a log event, if parsed in `humanlog`.\",\n      range: rangeForModelPos(model, pos, \"msg\"),\n    },\n    {\n      label: {\n        label: \"kv\",\n        detail: \" kv are key-values in a log event\",\n      },\n      kind: languages.CompletionItemKind.Property,\n      insertText: \"kv\",\n      documentation:\n        \"The key-values found in a log event, if parsed in `humanlog`.\",\n      range: rangeForModelPos(model, pos, \"kv\"),\n    },\n  ];\n};\n\nconst symbolsSuggestions = (\n  model: editor.ITextModel,\n  pos: Position,\n  symbols: Symbol[],\n): languages.CompletionItem[] => {\n  const word = model.getWordUntilPosition(pos);\n  const range = {\n    startLineNumber: pos.lineNumber,\n    endLineNumber: pos.lineNumber,\n    startColumn: word.startColumn,\n    endColumn: word.endColumn,\n  };\n\n  return symbols.map((sym): languages.CompletionItem => {\n    return {\n      label: sym.name,\n      kind: languages.CompletionItemKind.Variable,\n      insertText: \"['\" + sym.name + \"']\",\n      range: rangeForModelPos(model, pos, \"['\" + sym.name + \"']\"),\n    };\n  });\n};\n\nconst tableOperatorSuggestions = (\n  model: editor.ITextModel,\n  pos: Position,\n): languages.CompletionItem[] => {\n  const word = model.getWordUntilPosition(pos);\n  const range = {\n    startLineNumber: pos.lineNumber,\n    endLineNumber: pos.lineNumber,\n    startColumn: word.startColumn,\n    endColumn: word.endColumn,\n  };\n\n  return [\n    {\n      label: {\n        label: \"filter\",\n        detail: \" filter <expr>\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"filter\",\n      range: rangeForModelPos(model, pos, \"filter\"),\n    },\n    {\n      label: {\n        label: \"summarize\",\n        detail:\n          \" summarize [(<id> = )? <aggregate_func>]+ by [(<id> = )? <expr>]+\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"summarize\",\n      range: rangeForModelPos(model, pos, \"summarize\"),\n    },\n    {\n      label: {\n        label: \"project\",\n        detail: \" project [(<id> = )? <expr>]+\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"project\",\n      range: rangeForModelPos(model, pos, \"project\"),\n    },\n    {\n      label: {\n        label: \"project-away\",\n        detail: \" project-away [(<id> = )? <expr>]+\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"project-away\",\n      range: rangeForModelPos(model, pos, \"project-away\"),\n    },\n    {\n      label: {\n        label: \"project-keep\",\n        detail: \" project-keep [(<id> = )? <expr>]+\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"project-keep\",\n      range: rangeForModelPos(model, pos, \"project-keep\"),\n    },\n    {\n      label: {\n        label: \"extend\",\n        detail: \" extend [(<id> = )? <expr>]+\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"extend\",\n      range: rangeForModelPos(model, pos, \"extend\"),\n    },\n    {\n      label: {\n        label: \"count\",\n        detail: \" count\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"count\",\n      range: rangeForModelPos(model, pos, \"count\"),\n    },\n    {\n      label: {\n        label: \"distinct\",\n        detail: \" distinct <id>[, <id>]*\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"distinct\",\n      range: rangeForModelPos(model, pos, \"distinct\"),\n    },\n    {\n      label: {\n        label: \"sample\",\n        detail: \" sample <i64>\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"sample\",\n      range: rangeForModelPos(model, pos, \"sample\"),\n    },\n    {\n      label: {\n        label: \"search\",\n        detail: \" search <search-predicate>\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"search\",\n      range: rangeForModelPos(model, pos, \"search\"),\n    },\n    {\n      label: {\n        label: \"sort\",\n        detail: \" sort by <id> (asc|desc)? [, <id> (asc|desc)?]*\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"sort by\",\n      range: rangeForModelPos(model, pos, \"sort by\"),\n    },\n    {\n      label: {\n        label: \"take\",\n        detail: \" take <i64>\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"take\",\n      range: rangeForModelPos(model, pos, \"take\"),\n    },\n    {\n      label: {\n        label: \"top\",\n        detail: \" top <i64> by <expr> (asc|desc)?\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"top\",\n      range: rangeForModelPos(model, pos, \"top\"),\n    },\n    {\n      label: {\n        label: \"render split by\",\n        detail: \" render split by <expr> [, <expr>]*\",\n      },\n      kind: languages.CompletionItemKind.Operator,\n      insertText: \"render split by\",\n      range: rangeForModelPos(model, pos, \"render split by\"),\n    },\n  ];\n};\n\nexport default MonacoEditor;\n"],"names":["Editor","useRef","useEffect","useCallback","useState","languages","LANGUAGE_ID","humanlogqlLanguageDefinition","defaultOptions","automaticLayout","minimap","enabled","lineNumbers","overviewRulerBorder","overviewRulerLanes","hideCursorInOverviewRuler","renderLineHighlight","scrollbar","vertical","horizontal","verticalScrollbarSize","horizontalScrollbarSize","useShadows","scrollBeyondLastLine","padding","top","bottom","fontSize","lineHeight","contextmenu","selectOnLineNumbers","roundedSelection","readOnly","cursorStyle","wordWrap","quickSuggestions","parameterHints","suggestOnTriggerCharacters","MonacoEditor","width","height","value","onChange","onMount","options","props","editorRef","monacoRef","dynamicHeight","setDynamicHeight","mergedOptions","handleResize","current","layout","lineCount","split","length","minHeight","maxHeight","calculatedHeight","Math","min","max","handleEditorDidMount","editor","monaco","getModel","updateOptions","tabSize","defineTheme","base","inherit","rules","colors","register","id","setLanguageConfiguration","languageConfiguration","setMonarchTokensProvider","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","model","position","context","token","suggestions","triggerKind","CompletionTriggerKind","Invoke","push","defaultColumnsSuggestions","window","addEventListener","removeEventListener","defaultLanguage","loading","folding","offSide","markers","start","end","comments","lineComment","blockComment","autoClosingPairs","open","close","notIn","brackets","colorizedBracketPairs","rangeForModelPos","pos","keyword","word","getWordUntilPosition","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","label","detail","kind","CompletionItemKind","Property","insertText","documentation","range","symbolsSuggestions","symbols","map","sym","name","Variable","tableOperatorSuggestions","Operator"],"mappings":"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"}