{"version":3,"sources":["../../../../src/components/monaco-editor/monarch.ts"],"sourcesContent":["// if someone wants to tweak this, have fun with:\n// -> https://microsoft.github.io/monaco-editor/monarch.html\n\n// largely lifted from https://github.com/Azure/monaco-kusto/tree/master/package/src/syntaxHighlighting\n\nimport type * as monaco from \"monaco-editor\";\nimport { LANGUAGE_ID } from \"./globals\";\nimport { Token } from \"./types\";\n\n// todo: pull the actual operator list\n// from the reference\nconst queryOperators = [\n  \"as\",\n  \"consume\",\n  \"distinct\",\n  \"evaluate\",\n  \"extend\",\n  \"getschema\",\n  \"graph-match\",\n  \"graph-merge\",\n  \"graph-to-table\",\n  \"invoke\",\n  \"join\",\n  \"limit\",\n  \"lookup\",\n  \"make-graph\",\n  \"make-series\",\n  \"mv-apply\",\n  \"mv-expand\",\n  \"order\",\n  \"parse\",\n  \"parse-kv\",\n  \"parse-where\",\n  \"project\",\n  \"project-away\",\n  \"project-keep\",\n  \"project-rename\",\n  \"project-reorder\",\n  \"range\",\n  \"reduce\",\n  \"render\",\n  \"sample\",\n  \"sample-distinct\",\n  \"scan\",\n  \"serialize\",\n  \"sort\",\n  \"summarize\",\n  \"take\",\n  \"top\",\n  \"top-hitters\",\n  \"top-nested\",\n  \"union\",\n  \"where\",\n  \"filter\",\n  \"fork\",\n  \"facet\",\n  \"range\",\n  \"consume\",\n  \"find\",\n  \"search\",\n  \"print\",\n  \"partition\",\n  \"lookup\",\n];\n\nconst queryParameters = [\"kind\"];\n\n// todo: pull the types from the reference\nconst types = [\n  \"bool\",\n  \"datetime\",\n  \"decimal\",\n  \"double\",\n  \"dynamic\",\n  \"guid\",\n  \"int\",\n  \"long\",\n  \"real\",\n  \"string\",\n  \"timespan\",\n];\n\n// todo: pull the actual function list\n// from the reference\nconst functions = [\n  \"abs\",\n  \"acos\",\n  \"ago\",\n  \"array_concat\",\n  \"array_length\",\n  \"array_slice\",\n  \"array_split\",\n  \"asin\",\n  \"atan\",\n  \"atan2\",\n  \"avg\",\n  \"bag_keys\",\n  \"base64_decodestring\",\n  \"base64_encodestring\",\n  \"bin\",\n  \"bin_at\",\n  \"binary_and\",\n  \"binary_not\",\n  \"binary_or\",\n  \"binary_shift_left\",\n  \"binary_shift_right\",\n  \"binary_xor\",\n  \"case\",\n  \"ceiling\",\n  \"coalesce\",\n  \"columnifexists\",\n  \"cos\",\n  \"count\",\n  \"countof\",\n  \"cot\",\n  \"cursor_after\",\n  \"datatable\",\n  \"datepart\",\n  \"datetime_add\",\n  \"datetime_diff\",\n  \"datetime_part\",\n  \"dayofmonth\",\n  \"dayofweek\",\n  \"dayofyear\",\n  \"dcount\",\n  \"dcount_hll\",\n  \"degrees\",\n  \"endofday\",\n  \"endofmonth\",\n  \"endofweek\",\n  \"endofyear\",\n  \"exp\",\n  \"exp10\",\n  \"exp2\",\n  \"extract\",\n  \"extractall\",\n  \"extractjson\",\n  \"format_datetime\",\n  \"format_timespan\",\n  \"floor\",\n  \"gamma\",\n  \"geo_distance_2points\",\n  \"geo_geohash_to_central_point\",\n  \"geo_point_in_circle\",\n  \"geo_point_in_polygon\",\n  \"geo_point_to_geohash\",\n  \"getmonth\",\n  \"gettype\",\n  \"getyear\",\n  \"hash\",\n  \"hash_sha256\",\n  \"hll_merge\",\n  \"iif\",\n  \"indexof\",\n  \"isempty\",\n  \"isfinite\",\n  \"isinf\",\n  \"isascii\",\n  \"isnan\",\n  \"isnotempty\",\n  \"isnotnull\",\n  \"isnull\",\n  \"isutf8\",\n  \"log\",\n  \"log10\",\n  \"log2\",\n  \"loggamma\",\n  \"make_datetime\",\n  \"make_string\",\n  \"make_timespan\",\n  \"materialize\",\n  \"max\",\n  \"max_of\",\n  \"min\",\n  \"min_of\",\n  \"monthofyear\",\n  \"next\",\n  \"not\",\n  \"pack\",\n  \"pack_array\",\n  \"pack_dictionary\",\n  \"parse_csv\",\n  \"parse_ipv4\",\n  \"parse_json\",\n  \"parse_path\",\n  \"parse_url\",\n  \"parse_urlquery\",\n  \"parse_user_agent\",\n  \"parse_version\",\n  \"parse_xml\",\n  \"parsejson\",\n  \"percentrank_tdigest\",\n  \"percentile_tdigest\",\n  \"pow\",\n  \"prev\",\n  \"radians\",\n  \"rand\",\n  \"rank_tdigest\",\n  \"repeat\",\n  \"replace\",\n  \"reverse\",\n  \"round\",\n  \"row_cumsum\",\n  \"row_window_session\",\n  \"series_add\",\n  \"series_decompose\",\n  \"series_decompose_anomalies\",\n  \"series_decompose_forecast\",\n  \"series_divide\",\n  \"series_equals\",\n  \"series_fill_backward\",\n  \"series_fill_const\",\n  \"series_fill_forward\",\n  \"series_fill_linear\",\n  \"series_fir\",\n  \"series_fit_2lines\",\n  \"series_fit_2lines_dynamic\",\n  \"series_fit_line\",\n  \"series_fit_line_dynamic\",\n  \"series_greater\",\n  \"series_greater_equals\",\n  \"series_iir\",\n  \"series_less\",\n  \"series_less_equals\",\n  \"series_multiply\",\n  \"series_not_equals\",\n  \"series_outliers\",\n  \"series_pearson_correlation\",\n  \"series_periods_detect\",\n  \"series_periods_validate\",\n  \"series_seasonal\",\n  \"series_stats\",\n  \"series_stats_dynamic\",\n  \"series_subtract\",\n  \"sign\",\n  \"sin\",\n  \"split\",\n  \"sqrt\",\n  \"startofday\",\n  \"startofmonth\",\n  \"startofweek\",\n  \"startofyear\",\n  \"strcat\",\n  \"strcat_array\",\n  \"strcat_delim\",\n  \"strcmp\",\n  \"strlen\",\n  \"strrep\",\n  \"string_size\",\n  \"substring\",\n  \"sum\",\n  \"tan\",\n  \"tdigest_merge\",\n  \"tobool\",\n  \"toboolean\",\n  \"todecimal\",\n  \"todouble\",\n  \"todynamic\",\n  \"tofloat\",\n  \"toguid\",\n  \"tohex\",\n  \"toint\",\n  \"tolong\",\n  \"tolower\",\n  \"toobject\",\n  \"toreal\",\n  \"toscalar\",\n  \"tostring\",\n  \"totimespan\",\n  \"toupper\",\n  \"translate\",\n  \"trim\",\n  \"trim_end\",\n  \"trim_start\",\n  \"typeof\",\n  \"url_decode\",\n  \"url_encode\",\n  \"week_of_year\",\n  \"welch_test\",\n];\nconst keywords = [\n  \"and\",\n  \"as\",\n  \"asc\",\n  \"by\",\n  \"contains\",\n  \"count\",\n  \"desc\",\n  \"extend\",\n  \"false\",\n  \"filter\",\n  \"find\",\n  \"has\",\n  \"in\",\n  \"let\",\n  \"not\",\n  \"on\",\n  \"or\",\n  \"project\",\n  \"project-away\",\n  \"project-rename\",\n  \"project-reorder\",\n  \"project-keep\",\n  \"rename\",\n  \"summarize\",\n  \"take\",\n  \"to\",\n  \"true\",\n  \"where\",\n];\n\nexport const humanlogqlLanguageDefinition: monaco.languages.IMonarchLanguage = {\n  name: LANGUAGE_ID,\n  mimeTypes: [\"text/humanlogql\"],\n  displayName: \"humanlogQL\",\n  defaultToken: \"invalid\",\n  queryOperators,\n  queryParameters,\n  types,\n  functions,\n  keywords,\n  tokenizer: {\n    root: [\n      [/(\\/\\/.*$)/, Token.Comment],\n      [/[\\(\\)\\{\\}\\|\\[\\]\\:\\=\\,\\<|\\.\\..]/, Token.Punctuation],\n      [\n        /[\\+\\-\\*\\/\\%\\!\\<\\<=\\>\\>=\\=\\==\\!=\\<>\\:\\;\\,\\=~\\@\\?\\=>\\!~]/,\n        Token.MathOperator,\n      ],\n      [/\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"/, Token.StringLiteral],\n      [/'([^\"\\\\]*(\\\\.[^\"\\\\]*)*)'/, Token.StringLiteral],\n      [\n        /[\\w@#\\-$\\.]+/,\n        {\n          cases: {\n            \"@queryOperators\": Token.QueryOperator,\n            \"@queryParameters\": Token.QueryParameter,\n            \"@types\": Token.Type,\n            \"@functions\": Token.Function,\n            \"@keywords\": Token.Keyword,\n            \"@default\": Token.Identifier,\n          },\n        },\n      ],\n    ],\n  },\n};\n"],"names":["LANGUAGE_ID","Token","queryOperators","queryParameters","types","functions","keywords","humanlogqlLanguageDefinition","name","mimeTypes","displayName","defaultToken","tokenizer","root","Comment","Punctuation","MathOperator","StringLiteral","cases","QueryOperator","QueryParameter","Type","Function","Keyword","Identifier"],"mappings":"AAAA,iDAAiD;AACjD,4DAA4D;AAE5D,uGAAuG;AAGvG,SAASA,WAAW,QAAQ,YAAY;AACxC,SAASC,KAAK,QAAQ,UAAU;AAEhC,sCAAsC;AACtC,qBAAqB;AACrB,MAAMC,iBAAiB;IACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAMC,kBAAkB;IAAC;CAAO;AAEhC,0CAA0C;AAC1C,MAAMC,QAAQ;IACZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,sCAAsC;AACtC,qBAAqB;AACrB,MAAMC,YAAY;IAChf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,OAAO,MAAMC,+BAAkE;IAC7EC,MAAMR;IACNS,WAAW;QAAC;KAAkB;IAC9BC,aAAa;IACbC,cAAc;IACdT;IACAC;IACAC;IACAC;IACAC;IACAM,WAAW;QACTC,MAAM;YACJ;gBAAC;gBAAaZ,MAAMa,OAAO;aAAC;YAC5B;gBAAC;gBAAkCb,MAAMc,WAAW;aAAC;YACrD;gBACE;gBACAd,MAAMe,YAAY;aACnB;YACD;gBAAC;gBAA4Bf,MAAMgB,aAAa;aAAC;YACjD;gBAAC;gBAA4BhB,MAAMgB,aAAa;aAAC;YACjD;gBACE;gBACA;oBACEC,OAAO;wBACL,mBAAmBjB,MAAMkB,aAAa;wBACtC,oBAAoBlB,MAAMmB,cAAc;wBACxC,UAAUnB,MAAMoB,IAAI;wBACpB,cAAcpB,MAAMqB,QAAQ;wBAC5B,aAAarB,MAAMsB,OAAO;wBAC1B,YAAYtB,MAAMuB,UAAU;oBAC9B;gBACF;aACD;SACF;IACH;AACF,EAAE"}