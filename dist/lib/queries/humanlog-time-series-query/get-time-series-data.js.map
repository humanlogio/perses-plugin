{"version":3,"sources":["../../../../src/queries/humanlog-time-series-query/get-time-series-data.ts"],"sourcesContent":["import { TimeSeriesData, TimeSeries } from \"@perses-dev/core\";\nimport {\n  TimeSeriesQueryPlugin,\n  replaceVariables,\n} from \"@perses-dev/plugin-system\";\nimport {\n  HumanlogTimeSeriesQuerySpec,\n  DatasourceQueryResponse,\n} from \"./humanlog-time-series-query-types\";\nimport { DEFAULT_DATASOURCE } from \"./constants\";\nimport { HumanlogDatasourceClient } from \"../../datasources\";\n\nfunction buildTimeSeries(response?: DatasourceQueryResponse): TimeSeries[] {\n  if (!response) {\n    return [];\n  }\n\n  return [{ name: \"todo\", values: [] }];\n}\n\nexport const getTimeSeriesData: TimeSeriesQueryPlugin<HumanlogTimeSeriesQuerySpec>[\"getTimeSeriesData\"] =\n  async (spec, context) => {\n    // return empty data if the query is empty\n    if (spec.query === undefined || spec.query === null || spec.query === \"\") {\n      return { series: [] };\n    }\n\n    const query = replaceVariables(spec.query, context.variableState);\n\n    const client = (await context.datasourceStore.getDatasourceClient(\n      // A default datasource will be selected by matching the kind of datasource if not provided\n      spec.datasource ?? DEFAULT_DATASOURCE,\n    )) as HumanlogDatasourceClient;\n\n    const { start, end } = context.timeRange;\n\n    const response = await client.query({\n      start: start.getTime().toString(),\n      end: end.getTime().toString(),\n      query,\n    });\n\n    const chartData: TimeSeriesData = {\n      series: buildTimeSeries(response),\n      timeRange: { start, end },\n      stepMs: 30 * 1000,\n      metadata: {\n        executedQueryString: query,\n      },\n    };\n\n    return chartData;\n  };\n"],"names":["replaceVariables","DEFAULT_DATASOURCE","buildTimeSeries","response","name","values","getTimeSeriesData","spec","context","query","undefined","series","variableState","client","datasourceStore","getDatasourceClient","datasource","start","end","timeRange","getTime","toString","chartData","stepMs","metadata","executedQueryString"],"mappings":"AACA,SAEEA,gBAAgB,QACX,4BAA4B;AAKnC,SAASC,kBAAkB,QAAQ,cAAc;AAGjD,SAASC,gBAAgBC,QAAkC;IACzD,IAAI,CAACA,UAAU;QACb,OAAO,EAAE;IACX;IAEA,OAAO;QAAC;YAAEC,MAAM;YAAQC,QAAQ,EAAE;QAAC;KAAE;AACvC;AAEA,OAAO,MAAMC,oBACX,OAAOC,MAAMC;IACX,0CAA0C;IAC1C,IAAID,KAAKE,KAAK,KAAKC,aAAaH,KAAKE,KAAK,KAAK,QAAQF,KAAKE,KAAK,KAAK,IAAI;QACxE,OAAO;YAAEE,QAAQ,EAAE;QAAC;IACtB;IAEA,MAAMF,QAAQT,iBAAiBO,KAAKE,KAAK,EAAED,QAAQI,aAAa;IAEhE,MAAMC,SAAU,MAAML,QAAQM,eAAe,CAACC,mBAAmB,CAC/D,2FAA2F;IAC3FR,KAAKS,UAAU,IAAIf;IAGrB,MAAM,EAAEgB,KAAK,EAAEC,GAAG,EAAE,GAAGV,QAAQW,SAAS;IAExC,MAAMhB,WAAW,MAAMU,OAAOJ,KAAK,CAAC;QAClCQ,OAAOA,MAAMG,OAAO,GAAGC,QAAQ;QAC/BH,KAAKA,IAAIE,OAAO,GAAGC,QAAQ;QAC3BZ;IACF;IAEA,MAAMa,YAA4B;QAChCX,QAAQT,gBAAgBC;QACxBgB,WAAW;YAAEF;YAAOC;QAAI;QACxBK,QAAQ,KAAK;QACbC,UAAU;YACRC,qBAAqBhB;QACvB;IACF;IAEA,OAAOa;AACT,EAAE"}