{"version":3,"sources":["../../../../src/queries/humanlog-trace-query/HumanlogTraceQueryEditor.tsx"],"sourcesContent":["import {\n  DatasourceSelect,\n  DatasourceSelectProps,\n  isVariableDatasource,\n  OptionsEditorProps,\n} from \"@perses-dev/plugin-system\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { HumanlogTraceQuerySpec } from \"./humanlog-trace-query-types\";\nimport { DATASOURCE_KIND, DEFAULT_DATASOURCE } from \"../constants\";\nimport MonacoEditor from \"../../components/monaco-editor\";\nimport { Box, Typography, useTheme } from \"@mui/material\";\n\ntype HumanlogTraceQueryEditorProps = OptionsEditorProps<HumanlogTraceQuerySpec>;\n\nexport function HumanlogTraceQueryEditor(\n  props: HumanlogTraceQueryEditorProps,\n): ReactElement {\n  const { onChange, value } = props;\n  const { datasource } = value;\n  const selectedDatasource = datasource ?? DEFAULT_DATASOURCE;\n  const [localQuery, setLocalQuery] = useState(value.query);\n  const theme = useTheme();\n\n  const handleDatasourceChange: DatasourceSelectProps[\"onChange\"] = (\n    newDatasourceSelection,\n  ) => {\n    if (\n      !isVariableDatasource(newDatasourceSelection) &&\n      newDatasourceSelection.kind === DATASOURCE_KIND\n    ) {\n      onChange({ ...value, datasource: newDatasourceSelection });\n      return;\n    }\n\n    throw new Error(\n      \"Got unexpected non HumanlogTraceQuery datasource selection\",\n    );\n  };\n\n  useEffect(() => {\n    setLocalQuery(value.query);\n  }, [value.query]);\n\n  return (\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n      {/* Datasource Selection */}\n      <Box>\n        <Typography\n          variant=\"subtitle2\"\n          sx={{\n            mb: 1,\n            fontWeight: 500,\n            color: theme.palette.text.secondary,\n          }}\n        >\n          Datasource\n        </Typography>\n        <DatasourceSelect\n          datasourcePluginKind={DATASOURCE_KIND}\n          value={selectedDatasource}\n          onChange={handleDatasourceChange}\n          notched\n        />\n      </Box>\n\n      {/* Query Editor */}\n      <Box>\n        <Typography\n          variant=\"subtitle2\"\n          sx={{\n            mb: 1,\n            fontWeight: 500,\n            color: theme.palette.text.secondary,\n          }}\n        >\n          Query\n        </Typography>\n        <Box\n          sx={{\n            border: `1px solid ${theme.palette.divider}`,\n            borderRadius: \"4px\",\n            overflow: \"hidden\",\n            backgroundColor: theme.palette.background.paper,\n            boxShadow: theme.shadows[1],\n            \"&:hover\": {\n              borderColor: theme.palette.primary.main,\n            },\n            \"&:focus-within\": {\n              borderColor: theme.palette.primary.main,\n              borderWidth: \"2px\",\n              margin: \"-1px\", // Prevent layout shift\n            },\n            transition: theme.transitions.create([\n              \"border-color\",\n              \"box-shadow\",\n            ]),\n          }}\n        >\n          <MonacoEditor\n            value={localQuery}\n            onChange={(val) => {\n              setLocalQuery(val ?? \"\");\n              if (val !== undefined && val !== value.query) {\n                onChange({ ...value, query: val });\n              }\n            }}\n            options={{\n              fontFamily: theme.typography.fontFamily,\n            }}\n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n"],"names":["DatasourceSelect","isVariableDatasource","useEffect","useState","DATASOURCE_KIND","DEFAULT_DATASOURCE","MonacoEditor","Box","Typography","useTheme","HumanlogTraceQueryEditor","props","onChange","value","datasource","selectedDatasource","localQuery","setLocalQuery","query","theme","handleDatasourceChange","newDatasourceSelection","kind","Error","sx","display","flexDirection","gap","variant","mb","fontWeight","color","palette","text","secondary","datasourcePluginKind","notched","border","divider","borderRadius","overflow","backgroundColor","background","paper","boxShadow","shadows","borderColor","primary","main","borderWidth","margin","transition","transitions","create","val","undefined","options","fontFamily","typography"],"mappings":";AAAA,SACEA,gBAAgB,EAEhBC,oBAAoB,QAEf,4BAA4B;AACnC,SAAuBC,SAAS,EAAEC,QAAQ,QAAQ,QAAQ;AAE1D,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,eAAe;AACnE,OAAOC,kBAAkB,iCAAiC;AAC1D,SAASC,GAAG,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,gBAAgB;AAI1D,OAAO,SAASC,yBACdC,KAAoC;IAEpC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGF;IAC5B,MAAM,EAAEG,UAAU,EAAE,GAAGD;IACvB,MAAME,qBAAqBD,cAAcT;IACzC,MAAM,CAACW,YAAYC,cAAc,GAAGd,SAASU,MAAMK,KAAK;IACxD,MAAMC,QAAQV;IAEd,MAAMW,yBAA4D,CAChEC;QAEA,IACE,CAACpB,qBAAqBoB,2BACtBA,uBAAuBC,IAAI,KAAKlB,iBAChC;YACAQ,SAAS;gBAAE,GAAGC,KAAK;gBAAEC,YAAYO;YAAuB;YACxD;QACF;QAEA,MAAM,IAAIE,MACR;IAEJ;IAEArB,UAAU;QACRe,cAAcJ,MAAMK,KAAK;IAC3B,GAAG;QAACL,MAAMK,KAAK;KAAC;IAEhB,qBACE,MAACX;QAAIiB,IAAI;YAAEC,SAAS;YAAQC,eAAe;YAAUC,KAAK;QAAE;;0BAE1D,MAACpB;;kCACC,KAACC;wBACCoB,SAAQ;wBACRJ,IAAI;4BACFK,IAAI;4BACJC,YAAY;4BACZC,OAAOZ,MAAMa,OAAO,CAACC,IAAI,CAACC,SAAS;wBACrC;kCACD;;kCAGD,KAAClC;wBACCmC,sBAAsB/B;wBACtBS,OAAOE;wBACPH,UAAUQ;wBACVgB,OAAO;;;;0BAKX,MAAC7B;;kCACC,KAACC;wBACCoB,SAAQ;wBACRJ,IAAI;4BACFK,IAAI;4BACJC,YAAY;4BACZC,OAAOZ,MAAMa,OAAO,CAACC,IAAI,CAACC,SAAS;wBACrC;kCACD;;kCAGD,KAAC3B;wBACCiB,IAAI;4BACFa,QAAQ,CAAC,UAAU,EAAElB,MAAMa,OAAO,CAACM,OAAO,EAAE;4BAC5CC,cAAc;4BACdC,UAAU;4BACVC,iBAAiBtB,MAAMa,OAAO,CAACU,UAAU,CAACC,KAAK;4BAC/CC,WAAWzB,MAAM0B,OAAO,CAAC,EAAE;4BAC3B,WAAW;gCACTC,aAAa3B,MAAMa,OAAO,CAACe,OAAO,CAACC,IAAI;4BACzC;4BACA,kBAAkB;gCAChBF,aAAa3B,MAAMa,OAAO,CAACe,OAAO,CAACC,IAAI;gCACvCC,aAAa;gCACbC,QAAQ;4BACV;4BACAC,YAAYhC,MAAMiC,WAAW,CAACC,MAAM,CAAC;gCACnC;gCACA;6BACD;wBACH;kCAEA,cAAA,KAAC/C;4BACCO,OAAOG;4BACPJ,UAAU,CAAC0C;gCACTrC,cAAcqC,OAAO;gCACrB,IAAIA,QAAQC,aAAaD,QAAQzC,MAAMK,KAAK,EAAE;oCAC5CN,SAAS;wCAAE,GAAGC,KAAK;wCAAEK,OAAOoC;oCAAI;gCAClC;4BACF;4BACAE,SAAS;gCACPC,YAAYtC,MAAMuC,UAAU,CAACD,UAAU;4BACzC;;;;;;;AAMZ"}