(self.webpackChunkHumanlog=self.webpackChunkHumanlog||[]).push([["3855"],{68347:function(e,t,r){var a={"./simpleWorker.js":"18352","./simpleWorker":"18352"};function n(e){return Promise.resolve().then(function(){if(!r.o(a,e)){var t=Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r(a[e])})}n.keys=()=>Object.keys(a),n.id=68347,e.exports=n},37738:function(e,t,r){var a={"./textModelSync/textModelSync.protocol":["23145","5671"],"./treeSitterParserService":["28922"],"./markerDecorations":["36357"],"./languageService.js":["81032"],"./languageService":["81032"],"./markerDecorationsService":["86036"],"./markerDecorationsService.js":["86036"],"./modelService.js":["51200"],"./resolverService":["88216"],"./semanticTokensProviderStyling":["33789"],"./languageFeatureDebounce":["88191"],"./editorSimpleWorker":["87267"],"./textModelSync/textModelSync.impl.js":["49290"],"./modelService":["51200"],"./semanticTokensDto.js":["14704","7289"],"./textModelSync/textModelSync.impl":["49290"],"./model":["73733"],"./treeViewsDnd":["80642","60"],"./languagesRegistry":["4765"],"./model.js":["73733"],"./findSectionHeaders.js":["72846"],"./editorBaseApi":["20927"],"./treeSitterParserService.js":["28922"],"./resolverService.js":["88216"],"./semanticTokensProviderStyling.js":["33789"],"./getIconClasses.js":["72017","2861"],"./languageFeatures":["71922"],"./semanticTokensDto":["14704","7289"],"./semanticTokensStylingService":["84146"],"./editorBaseApi.js":["20927"],"./textResourceConfiguration":["71765"],"./treeViewsDndService":["58345","3178"],"./semanticTokensStyling":["73343"],"./textResourceConfiguration.js":["71765"],"./treeViewsDnd.js":["80642","60"],"./editorWorker.js":["85215"],"./unicodeTextModelHighlighter":["31446"],"./unicodeTextModelHighlighter.js":["31446"],"./editorSimpleWorker.js":["87267"],"./languagesAssociations.js":["73536"],"./languageFeatures.js":["71922"],"./treeViewsDndService.js":["58345","3178"],"./languageFeatureDebounce.js":["88191"],"./languageFeaturesService.js":["32205"],"./editorWorker":["85215"],"./textModelSync/textModelSync.protocol.js":["23145","5671"],"./findSectionHeaders":["72846"],"./languageFeaturesService":["32205"],"./semanticTokensStyling.js":["73343"],"./languagesAssociations":["73536"],"./editorWorkerHost":["98008"],"./editorWorkerHost.js":["98008"],"./getIconClasses":["72017","2861"],"./languagesRegistry.js":["4765"],"./semanticTokensStylingService.js":["84146"],"./markerDecorations.js":["36357"]};function n(e){if(!r.o(a,e))return Promise.resolve().then(function(){var t=Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t});var t=a[e],n=t[0];return Promise.all(t.slice(1).map(r.e)).then(function(){return r(n)})}n.keys=()=>Object.keys(a),n.id=37738,e.exports=n},83596:function(e){function t(e){var t=Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=83596,e.exports=t},39399:function(e,t,r){"use strict";r.r(t),r.d(t,{HumanlogTimeSeriesQueryEditor:()=>w,DATASOURCE_KIND:()=>a,DEFAULT_DATASOURCE:()=>n,getTimeSeriesData:()=>l,HumanlogTimeSeriesQuery:()=>S});let a="HumanlogDatasource",n={kind:a};var i,o=r(56337),s=r(6933);let l=async(e,t)=>{if(void 0===e.query||null===e.query||""===e.query)return{series:[]};let r=(0,o.replaceVariables)(e.query,t.variableState),a=await t.datasourceStore.getDatasourceClient(e.datasource??n),{start:i,end:l}=t.timeRange;return{series:function(e){var t,r;if(!(null==e||null==(r=e.data)||null==(t=r.data)?void 0:t.shape.case)||"freeForm"!==e.data.data.shape.case)return[];let{type:a,rows:n}=e.data.data.shape.value;if(!(null==a?void 0:a.columns)||0===n.length)return[];let i=a.columns.findIndex(e=>{var t,r;return(null==(r=e.type)||null==(t=r.type)?void 0:t.case)==="scalar"&&e.type.type.value===s.wx.ts}),o=a.columns.findIndex(e=>{var t,r;return(null==(r=e.type)||null==(t=r.type)?void 0:t.case)==="scalar"&&(e.type.type.value===s.wx.f64||e.type.type.value===s.wx.i64)});if(-1===o&&(o=a.columns.findIndex(e=>{var t,r;return(null==(r=e.type)||null==(t=r.type)?void 0:t.case)==="scalar"&&e.type.type.value===s.wx.dur})),-1===i||-1===o)return[];let l=[];for(let e of n){let t,r,a=e.items[i],n=e.items[o];if(a&&n){if("ts"!==a.kind.case)continue;if(t=a.kind.value.toDate().getTime(),"f64"===n.kind.case)r=n.kind.value;else if("i64"===n.kind.case)r=Number(n.kind.value);else if("dur"===n.kind.case){let e=n.kind.value;r=1e3*Number(e.seconds||0)+(e.nanos||0)/1e6}else r=null;l.push([t,r])}}return l.sort((e,t)=>e[0]-t[0]),[{name:"humanlog-time-series",values:l}]}(await a.query({start:i.getTime().toString(),end:l.getTime().toString(),query:r})),timeRange:{start:i,end:l},stepMs:3e4,metadata:{executedQueryString:r}}};var d=r(85893),u=r(2388),c=r(51443),m=r(22556);let g="humanlogql";var p=((i={}).PlainText="plainText",i.Comment="comment",i.Punctuation="punctuation",i.Literal="literal",i.StringLiteral="stringLiteral",i.Type="type",i.Column="column",i.Function="function",i.Parameter="parameter",i.Variable="variable",i.Identifier="identifier",i.QueryParameter="queryParameter",i.ScalarParameter="scalarParameter",i.MathOperator="mathOperator",i.QueryOperator="queryOperator",i.Command="command",i.Keyword="keyword",i);let h={name:g,mimeTypes:["text/humanlogql"],displayName:"humanlogQL",defaultToken:"invalid",queryOperators:["as","consume","distinct","evaluate","extend","getschema","graph-match","graph-merge","graph-to-table","invoke","join","limit","lookup","make-graph","make-series","mv-apply","mv-expand","order","parse","parse-kv","parse-where","project","project-away","project-keep","project-rename","project-reorder","range","reduce","render","sample","sample-distinct","scan","serialize","sort","summarize","take","top","top-hitters","top-nested","union","where","filter","fork","facet","range","consume","find","search","print","partition","lookup"],queryParameters:["kind"],types:["bool","datetime","decimal","double","dynamic","guid","int","long","real","string","timespan"],functions:["abs","acos","ago","array_concat","array_length","array_slice","array_split","asin","atan","atan2","avg","bag_keys","base64_decodestring","base64_encodestring","bin","bin_at","binary_and","binary_not","binary_or","binary_shift_left","binary_shift_right","binary_xor","case","ceiling","coalesce","columnifexists","cos","count","countof","cot","cursor_after","datatable","datepart","datetime_add","datetime_diff","datetime_part","dayofmonth","dayofweek","dayofyear","dcount","dcount_hll","degrees","endofday","endofmonth","endofweek","endofyear","exp","exp10","exp2","extract","extractall","extractjson","format_datetime","format_timespan","floor","gamma","geo_distance_2points","geo_geohash_to_central_point","geo_point_in_circle","geo_point_in_polygon","geo_point_to_geohash","getmonth","gettype","getyear","hash","hash_sha256","hll_merge","iif","indexof","isempty","isfinite","isinf","isascii","isnan","isnotempty","isnotnull","isnull","isutf8","log","log10","log2","loggamma","make_datetime","make_string","make_timespan","materialize","max","max_of","min","min_of","monthofyear","next","not","pack","pack_array","pack_dictionary","parse_csv","parse_ipv4","parse_json","parse_path","parse_url","parse_urlquery","parse_user_agent","parse_version","parse_xml","parsejson","percentrank_tdigest","percentile_tdigest","pow","prev","radians","rand","rank_tdigest","repeat","replace","reverse","round","row_cumsum","row_window_session","series_add","series_decompose","series_decompose_anomalies","series_decompose_forecast","series_divide","series_equals","series_fill_backward","series_fill_const","series_fill_forward","series_fill_linear","series_fir","series_fit_2lines","series_fit_2lines_dynamic","series_fit_line","series_fit_line_dynamic","series_greater","series_greater_equals","series_iir","series_less","series_less_equals","series_multiply","series_not_equals","series_outliers","series_pearson_correlation","series_periods_detect","series_periods_validate","series_seasonal","series_stats","series_stats_dynamic","series_subtract","sign","sin","split","sqrt","startofday","startofmonth","startofweek","startofyear","strcat","strcat_array","strcat_delim","strcmp","strlen","strrep","string_size","substring","sum","tan","tdigest_merge","tobool","toboolean","todecimal","todouble","todynamic","tofloat","toguid","tohex","toint","tolong","tolower","toobject","toreal","toscalar","tostring","totimespan","toupper","translate","trim","trim_end","trim_start","typeof","url_decode","url_encode","week_of_year","welch_test"],keywords:["and","as","asc","by","contains","count","desc","extend","false","filter","find","has","in","let","not","on","or","project","project-away","project-rename","project-reorder","project-keep","rename","summarize","take","to","true","where"],tokenizer:{root:[[/(\/\/.*$)/,p.Comment],[/[\(\)\{\}\|\[\]\:\=\,\<|\.\..]/,p.Punctuation],[/[\+\-\*\/\%\!\<\<=\>\>=\=\==\!=\<>\:\;\,\=~\@\?\=>\!~]/,p.MathOperator],[/"([^"\\]*(\\.[^"\\]*)*)"/,p.StringLiteral],[/'([^"\\]*(\\.[^"\\]*)*)'/,p.StringLiteral],[/[\w@#\-$\.]+/,{cases:{"@queryOperators":p.QueryOperator,"@queryParameters":p.QueryParameter,"@types":p.Type,"@functions":p.Function,"@keywords":p.Keyword,"@default":p.Identifier}}]]}},f={automaticLayout:!0,minimap:{enabled:!1},lineNumbers:"off",overviewRulerBorder:!1,overviewRulerLanes:0,hideCursorInOverviewRuler:!0,renderLineHighlight:"none",scrollbar:{vertical:"auto",horizontal:"auto",verticalScrollbarSize:8,horizontalScrollbarSize:8,useShadows:!1},scrollBeyondLastLine:!1,padding:{top:8,bottom:8},fontSize:14,lineHeight:20,contextmenu:!1,selectOnLineNumbers:!1,roundedSelection:!1,readOnly:!1,cursorStyle:"line",wordWrap:"off",quickSuggestions:!0,parameterHints:{enabled:!0},suggestOnTriggerCharacters:!0},y={folding:{offSide:!1,markers:{start:/^\s*[\r\n]/gm,end:/^\s*[\r\n]/gm}},comments:{lineComment:"//",blockComment:null},autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:"'",close:"'",notIn:["string","comment"]},{open:'"',close:'"',notIn:["string","comment"]}],brackets:[["[","]"],["{","}"],["(",")"]],colorizedBracketPairs:[]},_=(e,t,r)=>{let a=e.getWordUntilPosition(t);return{startLineNumber:t.lineNumber,endLineNumber:t.lineNumber,startColumn:a.startColumn,endColumn:a.endColumn}},v=e=>{let{width:t="100%",height:r=60,value:a,onChange:n,onMount:i,options:o,...s}=e,l=(0,u.useRef)(null),p=(0,u.useRef)(null),[v,k]=(0,u.useState)(r),b={...f,...o},x=(0,u.useCallback)(()=>{l.current&&l.current.layout()},[]);return(0,u.useEffect)(()=>{l.current&&a?k(Math.min(Math.max(18*a.split("\n").length+10,60),200)):k(r)},[a,r]),(0,u.useEffect)(()=>{a&&k(Math.min(Math.max(18*a.split("\n").length+10,60),200))},[]),(0,u.useEffect)(()=>{l.current&&l.current.layout()},[v]),(0,u.useEffect)(()=>(window.addEventListener("resize",x),()=>{window.removeEventListener("resize",x)}),[x]),(0,d.jsx)(c.ZP,{width:t,height:v,defaultLanguage:g,value:a,onChange:n,options:b,onMount:(e,t)=>{var r;l.current=e,p.current=t,null==(r=e.getModel())||r.updateOptions({tabSize:2}),e.updateOptions(f),e.layout(),t.editor.defineTheme("humanlogql-dark",{base:"vs-dark",inherit:!0,rules:[],colors:{"editor.background":"#000000"}}),t.editor.defineTheme("humanlogql-light",{base:"vs",inherit:!0,rules:[],colors:{"editor.background":"#FFFFFF"}}),t.languages.register({id:g}),t.languages.setLanguageConfiguration(g,y),t.languages.setMonarchTokensProvider(g,h),t.languages.registerCompletionItemProvider(g,{triggerCharacters:["[","|"],provideCompletionItems:async(e,t,r,a)=>{let n,i,o=[];return r.triggerKind===m.Mj.CompletionTriggerKind.Invoke&&o.push(...(n=e,i=t,[{label:{label:"machine",detail:" machine that emitted the log event"},kind:m.Mj.CompletionItemKind.Property,insertText:"machine",documentation:"The machine on which a log was recorded.",range:_(n,i,"machine")},{label:{label:"session",detail:" session of a log event"},kind:m.Mj.CompletionItemKind.Property,insertText:"session",documentation:"The session during which a log was recorded. Sessions roughly map to processes, or a single invocation of `humanlog`. Sessions are unique only within a machine.",range:_(n,i,"machine")},{label:{label:"event",detail:" event is an identifier for a log event"},kind:m.Mj.CompletionItemKind.Property,insertText:"event",documentation:"The event during which a log was recorded. Events roughly map to log lines ingested by `humanlog`. Events are unique and ordered only within a (machine, session) pair. No global order exists.",range:_(n,i,"event")},{label:{label:"parsed_at",detail:" parsed_at is the timestamp when the log event was parsed"},kind:m.Mj.CompletionItemKind.Property,insertText:"parsed_at",documentation:"The timestamp when the log event was parsed in `humanlog`.",range:_(n,i,"parsed_at")},{label:{label:"raw",detail:" raw is the raw content of the log event"},kind:m.Mj.CompletionItemKind.Property,insertText:"raw",documentation:"The full unparsed content of the log event.",range:_(n,i,"raw")},{label:{label:"ts",detail:" ts is a timestamp for a log event"},kind:m.Mj.CompletionItemKind.Property,insertText:"ts",documentation:"The ts found in a log event, if parsed in `humanlog`. When no timestamp is found, the default timestamp is the time of parsing. See `parsed_at`.",range:_(n,i,"ts")},{label:{label:"lvl",detail:" lvl is a log level"},kind:m.Mj.CompletionItemKind.Property,insertText:"lvl",documentation:"The log level found in a log event, if parsed in `humanlog`. Usually one of `debug`, `info`, `warn`, `error`, `panic` or `fatal`.",range:_(n,i,"lvl")},{label:{label:"msg",detail:" msg is the main message a log event"},kind:m.Mj.CompletionItemKind.Property,insertText:"msg",documentation:"The message found in a log event, if parsed in `humanlog`.",range:_(n,i,"msg")},{label:{label:"kv",detail:" kv are key-values in a log event"},kind:m.Mj.CompletionItemKind.Property,insertText:"kv",documentation:"The key-values found in a log event, if parsed in `humanlog`.",range:_(n,i,"kv")}])),{suggestions:o}}}),null==i||i(e,t)},loading:(0,d.jsx)(d.Fragment,{children:"Loading Editor..."}),...s})};var k=r(2734),b=r(61460),x=r(23972);function w(e){let{onChange:t,value:r}=e,{datasource:i}=r,[s,l]=(0,u.useState)(r.query),c=(0,k.Z)();return(0,u.useEffect)(()=>{l(r.query)},[r.query]),(0,d.jsxs)(b.Z,{sx:{display:"flex",flexDirection:"column",gap:2},children:[(0,d.jsxs)(b.Z,{children:[(0,d.jsx)(x.Z,{variant:"subtitle2",sx:{mb:1,fontWeight:500,color:c.palette.text.secondary},children:"Datasource"}),(0,d.jsx)(o.DatasourceSelect,{datasourcePluginKind:a,value:i??n,onChange:e=>{if(!(0,o.isVariableDatasource)(e)&&e.kind===a)return void t({...r,datasource:e});throw Error("Got unexpected non HumanlogTimeSeriesQuery datasource selection")},notched:!0})]}),(0,d.jsxs)(b.Z,{children:[(0,d.jsx)(x.Z,{variant:"subtitle2",sx:{mb:1,fontWeight:500,color:c.palette.text.secondary},children:"Query"}),(0,d.jsx)(b.Z,{sx:{border:`1px solid ${c.palette.divider}`,borderRadius:"4px",overflow:"hidden",backgroundColor:c.palette.background.paper,boxShadow:c.shadows[1],"&:hover":{borderColor:c.palette.primary.main},"&:focus-within":{borderColor:c.palette.primary.main,borderWidth:"2px",margin:"-1px"},transition:c.transitions.create(["border-color","box-shadow"])},children:(0,d.jsx)(v,{value:s,onChange:e=>{l(e??""),void 0!==e&&e!==r.query&&t({...r,query:e})},options:{fontFamily:c.typography.fontFamily}})})]})]})}let S={getTimeSeriesData:l,OptionsEditorComponent:w,createInitialOptions:()=>({query:""}),dependsOn:e=>({variables:[...new Set([...(0,o.parseVariables)(e.query)])]})}}}]);